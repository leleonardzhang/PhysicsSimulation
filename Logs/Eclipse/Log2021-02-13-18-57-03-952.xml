<Events startTimestamp="1613260623952" logVersion="1.0.0.202101171653">
  <Command __id="10" _type="DiffBasedFileOpenCommand" date="Sat Feb 13 18:57:31 EST 2021" docASTNodeCount="76" docActiveCodeLength="467" docExpressionCount="44" docLength="467" projectName="Comp533" starttimestamp="1613260623952" timestamp="27454">
    <filePath><![CDATA[/home/leonard/Source/Comp533/src/comp533/main/IntegerSummer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package comp533.main;

import comp533.mapreduce.MapperIntSumming;
import comp533.mapreduce.MapperFactory;
import comp533.mvc.Controller;
import comp533.mvc.ControllerInterface;

public class IntegerSummer implements MapReduceExampleInterface{
	public static void main (final String[] args){
		MapperFactory.setMapper(new MapperIntSumming());
		final ControllerInterface<String, Integer> controller = new Controller<String, Integer>();
		controller.mapreduce();
	}

}
]]></snapshot>
  </Command>
  <Command __id="51" _type="DiffBasedFileOpenCommand" date="Sat Feb 13 18:59:08 EST 2021" docASTNodeCount="579" docActiveCodeLength="3831" docExpressionCount="361" docLength="3984" projectName="Comp533" starttimestamp="1613260623952" timestamp="124336">
    <filePath><![CDATA[/home/leonard/Source/Comp533/src/comp533/slave/SlaveSuperClass.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package comp533.slave;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import comp533.keyValue.KeyValue;
import comp533.keyValue.KeyValueInterface;
import comp533.mapreduce.ReducerFactory;
import comp533.mapreduce.ReducerInterface;
import comp533.mvc.ModelInterface;
import comp533.partitioner.PartitionerFactory;
import comp533.partitioner.PartitionerInterface;
import gradingTools.comp533s19.assignment0.AMapReduceTracer;

public class SlaveSuperClass extends AMapReduceTracer implements SlaveInterface{
	protected String name;
	private int number;
	private ModelInterface<String, Integer> model;
	private List<KeyValue<String, Integer>> keyValueList = new ArrayList<KeyValue<String, Integer>> ();
	private Map<String, Integer> fullReduceResult;
	
	
	public SlaveSuperClass(final int aNumber, final ModelInterface<String, Integer> aModel) {
		number = aNumber;
		model = aModel;
	}
	
	@Override
	public void run() {
		KeyValueInterface<String, Integer> takenKeyValue = null;
		while (true) {
			try {
				// Tracer
				traceDequeueRequest(model.getKeyValueQueue());
				
				takenKeyValue = model.getKeyValueQueue().take();
				
				// Tracer
				traceDequeue(takenKeyValue);
				
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			if (takenKeyValue != null & (takenKeyValue.getKey() != null | takenKeyValue.getValue() != null)) {
				keyValueList.add((KeyValue<String, Integer>) takenKeyValue);
			} 
			else if (takenKeyValue != null){
				
				// Partial Reduce
				@SuppressWarnings("unchecked")
				final ReducerInterface<String, Integer> reducer = 
						(ReducerInterface<String, Integer>) ReducerFactory.getReducer();
				final Map<String, Integer> partialReduceResult = reducer.reduce(keyValueList);
				traceReduce(keyValueList, partialReduceResult);
				
				
				computePartition(partialReduceResult);
				
				
				// Tracer 
				traceBarrierWaitStart(this, model.getNumThreads(), model.getBarrier().getSize());
				
				model.getBarrier().barrier();
				
				
				// Tracer
				traceBarrierReleaseAll(this, model.getNumThreads(), model.getBarrier().getSize());
				
				// Tracer
				traceBarrierWaitEnd(this, model.getNumThreads(), model.getBarrier().getSize());
				
				// Tracer
				traceSplitAfterBarrier(number, model.getReductionQueueList().get(number));
				
				synchronized(model) {
					fullReduceResult = reducer.reduce(model.getReductionQueueList().get(number));
				}
				model.mergeResult(fullReduceResult);
				
				// Tracer
				traceJoinerFinishedTask(this, model.getNumThreads(), model.getJoiner().getSize());
				
				model.getJoiner().finished();
				
				traceWait();
				childrenWait();
			}	
		}
	}

	
	
	
	@Override
	public synchronized void childrenNotify() {
		traceNotify();
		try{
			notify();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public synchronized void childrenWait() {
		try {
			wait();
		}
		catch (Exception e) {
			// e.printStackTrace();
		}
	}
	
	@Override
	public synchronized void quit() {
		traceQuit();
	}

	@Override
	public void computePartition(Map<String, Integer> partialReduceResult) {
		// Partition & Assign to Reduction queue
		final PartitionerInterface<String, Integer> partitioner = PartitionerFactory.getPartitioner();
		
		for (Map.Entry<String, Integer> entry : partialReduceResult.entrySet()) {
			final String partitionedKey = entry.getKey();
			final int partitionedValue = entry.getValue();
			final KeyValueInterface<String, Integer> partitionedKeyValue = 
					new KeyValue<String, Integer>(partitionedKey, partitionedValue);
			final int partitionedResult = partitioner.getPartition(partitionedKey, partitionedValue, model.getNumThreads());
			
			// Tracer
			tracePartitionAssigned(partitionedKey, partitionedValue, partitionedResult, model.getNumThreads());
			
			synchronized(model) {
				model.getReductionQueueList().get(partitionedResult).add((KeyValue<String, Integer>) partitionedKeyValue);
			}
		}
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="93" _type="RunCommand" date="Sat Feb 13 19:01:29 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613260623952" timestamp="265545" type="Debug" />
  <Command __id="94" _type="RunCommand" date="Sat Feb 13 19:01:29 EST 2021" kind="HitBreakPoint" projectName="Comp533" starttimestamp="1613260623952" timestamp="265545" type="Run" />
  <Command __id="95" _type="RunCommand" date="Sat Feb 13 19:01:29 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1613260623952" timestamp="265545" type="Debug" />
  <Command __id="96" _type="RunCommand" date="Sat Feb 13 19:01:29 EST 2021" kind="HitBreakPoint" projectName="Comp533" starttimestamp="1613260623952" timestamp="265545" type="Run" />
  <Command __id="97" _type="DiffBasedFileOpenCommand" date="Sat Feb 13 19:01:32 EST 2021" docASTNodeCount="126" docActiveCodeLength="718" docExpressionCount="94" docLength="718" projectName="PhysicsSimulation" starttimestamp="1613260623952" timestamp="268741">
    <filePath><![CDATA[/home/leonard/Source/PhysicsSimulation/src/main/TestFrame.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package main;

import javax.swing.JButton;
import javax.swing.JSlider;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import components.mainpanel.MainPanel;
import components.mainpanel.MainPanelInterface;
import components.pendulum.load.Load;
import components.pendulum.load.LoadInterface;
import components.pendulum.protractor.Protractor;
import components.pendulum.protractor.ProtractorInterface;
import components.pendulum.string.PendulumString;
import components.pendulum.string.PendulumStringInterface;
import javafx.scene.control.Slider;

public class TestFrame {
	public static void main(String[] args) {
		MainPanelInterface panel = new MainPanel();
		OEFrame frame = ObjectEditor.edit(panel);
	}
}
]]></snapshot>
  </Command>
  <Command __id="98" _type="MoveCaretCommand" caretOffset="0" date="Sat Feb 13 19:01:32 EST 2021" docOffset="0" starttimestamp="1613260623952" timestamp="268824" />
  <Command __id="256" _type="DiffBasedFileOpenCommand" date="Sat Feb 13 19:06:30 EST 2021" docASTNodeCount="37" docActiveCodeLength="227" docExpressionCount="18" docLength="227" projectName="Comp533" starttimestamp="1613260623952" timestamp="566985">
    <filePath><![CDATA[/home/leonard/Source/Comp533/src/comp533/slave/SlaveInterface.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package comp533.slave;¶¶import java.util.Map;¶¶public interface SlaveInterface extends Runnable{¶	void childrenNotify();¶	void childrenWait();¶	void quit();¶	void computePartition(Map<String, Integer> partialReduceResult);¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="257" _type="MoveCaretCommand" caretOffset="222" date="Sat Feb 13 19:06:30 EST 2021" docOffset="222" starttimestamp="1613260623952" timestamp="567034" />
  <Command __id="258" _type="DiffBasedFileOpenCommand" date="Sat Feb 13 19:06:31 EST 2021" docASTNodeCount="101" docActiveCodeLength="724" docExpressionCount="53" docLength="724" projectName="PhysicsSimulation" starttimestamp="1613260623952" timestamp="567709">
    <filePath><![CDATA[/home/leonard/Source/PhysicsSimulation/src/components/mainpanel/MainPanelInterface.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package components.mainpanel;¶¶import java.util.List;¶import components.pendulum.imageprotractor.ImageProtractorInterface;¶import components.pendulum.pendulum.ObserverPendulumInterface;¶import components.ruler.RulerInterface;¶¶public interface MainPanelInterface {¶	void setGravity(int g);¶	void setFriction(int f);¶	int getGravity();¶	int getFriction();¶	void setModel();¶	List<ObserverPendulumInterface> getPendulum();¶	RulerInterface getRuler();¶	void setRuler(RulerInterface newRuler);¶	void pause();¶	void reset();¶	int getNumberOfPendulum();¶	void increaseNumberOfPendulum();¶	void decreaseNumberOfPendulum();¶	ImageProtractorInterface getProtractor();¶	void setProtractor(ImageProtractorInterface newProtractor);¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="259" _type="MoveCaretCommand" caretOffset="347" date="Sat Feb 13 19:06:31 EST 2021" docOffset="519" starttimestamp="1613260623952" timestamp="567737" />
</Events>
